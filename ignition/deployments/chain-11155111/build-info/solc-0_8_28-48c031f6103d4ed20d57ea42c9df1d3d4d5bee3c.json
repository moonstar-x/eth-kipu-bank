{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-48c031f6103d4ed20d57ea42c9df1d3d4d5bee3c",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/KipuBank.sol": "project/contracts/KipuBank.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/errors/KipuBankErrors.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nlibrary KipuBankErrors {\n  /**\n   * Error thrown when the contract has or would reach the bank cap set\n   * in the deployment step by the current deposit.\n   */\n  error BankCapReachedError();\n\n  /**\n   * Error thrown when the current withdrawal request would exceed the\n   * withdraw limit set in the deployment step.\n   * @param sender The address of the sender.\n   * @param amount The amount that was attempted to be withdrawn.\n   */\n  error WithdrawLimitExceededError(address sender, uint256 amount);\n\n  /**\n   * Error thrown when a withdrawal request attempts to withdraw an amount\n   * that exceeds the funds stored in the contract.\n   * @param sender The address of the sender.\n   * @param funds The funds in the sender's vault.\n   * @param amount The amount that was attempted to be withdrawn.\n   */\n  error InsufficientFundsError(address sender, uint256 funds, uint256 amount);\n\n  /**\n   * Error thrown if a transfer was not successful.\n   */\n  error TransferError();\n}\n"
      },
      "project/contracts/events/KipuBankEvents.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nlibrary KipuBankEvents {\n  /**\n   * Event emitted when a deposit is successful.\n   * @param addr The address of the message sender.\n   * @param amount The amount deposited.\n   */\n  event DepositSuccess(address addr, uint256 amount);\n\n  /**\n   * Event emitted when a withdraw is successful.\n   * @param addr The address of the message sender.\n   * @param amount The amount withdrawn.\n   */\n  event WithdrawSuccess(address addr, uint256 amount);\n}\n"
      },
      "project/contracts/KipuBank.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport { KipuBankErrors } from \"./errors/KipuBankErrors.sol\";\nimport { KipuBankEvents } from \"./events/KipuBankEvents.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract KipuBank is ReentrancyGuard {\n  /**\n   * The maximum value tha this contract can hold.\n   */\n  uint256 private immutable BANK_CAP;\n\n  /**\n   * The maximum amount that a user can withdraw from their vault in a single transaction.\n   */\n  uint256 private immutable MAX_SINGLE_WITHDRAW_LIMIT;\n\n  /**\n   * Vault that keeps funds per address.\n   */\n  mapping(address => uint256) private _vault;\n\n  /**\n   * Counter for each successful deposit.\n   */\n  uint256 private _depositCount = 0;\n\n  /**\n   * Counter for each successful withdrawal.\n   */\n  uint256 private _withdrawCount = 0;\n\n  constructor(uint256 bankCap, uint256 maxWithdrawLimit) {\n    require(bankCap > maxWithdrawLimit, \"Bank cap must be greater than max withdraw limit.\");\n\n    BANK_CAP = bankCap;\n    MAX_SINGLE_WITHDRAW_LIMIT = maxWithdrawLimit;\n  }\n\n  /**\n   * Deposits the value in the address' vault.\n   */\n  function deposit() public payable {\n    uint256 potentialBankValue = getBalance() + msg.value;\n    if (potentialBankValue > BANK_CAP) {\n      revert KipuBankErrors.BankCapReachedError();\n    }\n\n    _updateDepositValues(msg.sender, msg.value);\n    emit KipuBankEvents.DepositSuccess(msg.sender, msg.value);\n  }\n\n  /**\n   * Withdraws amount from the address' vault.\n   * @param amount The amount to withdraw. \n   */\n  function withdraw(uint256 amount) public nonReentrant {\n    if (amount > MAX_SINGLE_WITHDRAW_LIMIT) {\n      revert KipuBankErrors.WithdrawLimitExceededError(msg.sender, MAX_SINGLE_WITHDRAW_LIMIT);\n    }\n\n    uint256 funds = _vault[msg.sender];\n    if (amount > funds) {\n      revert KipuBankErrors.InsufficientFundsError(msg.sender, funds, amount);\n    }\n\n    _updateWithdrawValues(msg.sender, amount);\n    emit KipuBankEvents.WithdrawSuccess(msg.sender, amount);\n\n    address payable payableSender = payable(msg.sender);\n    (bool success, ) = payableSender.call{ value: amount }(\"\");\n    if (!success) {\n      revert KipuBankErrors.TransferError();\n    }\n  }\n\n  /**\n   * Get balance in this contract.\n   */\n  function getBalance() public view returns (uint256) {\n    return address(this).balance;\n  }\n\n\n  /**\n   * Get balance for the sender.\n   */\n  function getMyFunds() external view returns (uint256) {\n    return _vault[msg.sender];\n  }\n\n  /**\n   * Get funds stored in vault for a given address.\n   * @param addr The address to check the funds for.\n   */\n  function getFundsForAddress(address addr) external view returns (uint256) {\n    return _vault[addr];\n  }\n\n  /**\n   * Get this contract's deposit count.\n   */\n  function getDepositCount() external view returns (uint256) {\n    return _depositCount;\n  }\n\n  /**\n   * Get this contract's withdraw count.\n   */\n  function getWithdrawCount() external view returns (uint256) {\n    return _withdrawCount;\n  }\n\n  /**\n   * Update the relevant variables when a deposit is successful.\n   */\n  function _updateDepositValues(address addr, uint256 amount) private {\n    _vault[addr] += amount;\n    _depositCount++;\n  }\n\n  /**\n   * Update the relevant variables when a withdrawal is successful.\n   */\n  function _updateWithdrawValues(address addr, uint256 amount) private {\n    _vault[addr] -= amount;\n    _withdrawCount++;\n  }\n\n  receive() external payable {\n    deposit();\n  }\n}\n"
      }
    }
  }
}