{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-89aab1bf723afa6a5fe3727408318295adbc8915",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/KipuBank.sol": "project/contracts/KipuBank.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@chainlink/contracts/=npm/@chainlink/contracts@1.5.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@chainlink/contracts@1.5.0/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/KipuBank.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport { AggregatorV3Interface } from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title Kipu Bank Interface\n * @author Christian López (@moonstar-x)\n * @notice The interface that KipuBank must implement.\n * @dev Used to document which functions are expected to be available in the contract.\n */\ninterface IKipuBank {\n    /**\n     * @notice Allows contract to receive ETH directly.\n     */\n    receive() external payable;\n\n    /**\n     * @notice Deposits the value in the address' ETH vault.\n     * @dev Reverts with BankCapReachedError if the deposit would exceed the bank cap.\n     * @dev Emits a DepositSuccess event upon success.\n     */\n    function depositEther() external payable;\n\n    /**\n     * @notice Deposits the value in the address' USDC vault.\n     * Bank cap is dynamically converted from ETH to USDC, assume that this value might fluctuate.\n     * @dev Reverts with BankCapReachedError if the deposit would exceed the bank cap.\n     * @dev Emits a DepositSuccess event upon success.\n     * @param _amount The amount in USDC to deposit.\n     */\n    function depositUsdc(uint256 _amount) external;\n\n    /**\n     * @notice Withdraws amount from the address' ETH vault.\n     * @dev Reverts with WithdrawLimitExceededError if the amount exceeds the single withdraw limit.\n     * @dev Reverts with InsufficientFundsError if the withdraw would exceed the available balance.\n     * @dev Reverts with TransferError if the transfer was not successful.\n     * @dev Emits a WithdrawSuccess event upon success.\n     * @param _amount The amount to withdraw.\n     */\n    function withdrawEther(uint256 _amount) external;\n\n    /**\n     * @notice Withdraws the value in the address' USDC vault.\n     * @dev Reverts with WithdrawLimitExceededError if the amount exceeds the single withdraw limit.\n     * @dev Reverts with InsufficientFundsError if the withdraw would exceed the available balance.\n     * @dev Reverts with TransferError if the transfer was not successful.\n     * @dev Emits a WithdrawSuccess event upon success.\n     * @param _amount The amount in USDC to withdraw.\n     */\n    function withdrawUsdc(uint256 _amount) external;\n\n    /**\n     * @notice Get balance in this contract in ETH.\n     * @return balance_ The balance of this contract in ETH.\n     */\n    function getBalanceEther() external view returns (uint256 balance_);\n\n    /**\n     * @notice Get balance in this contract in USDC.\n     * @return balance_ The balance of this contract in USDC.\n     */\n    function getBalanceUsdc() external view returns (uint256 balance_);\n\n    /**\n     * @notice Get the total balance in this contract in USD.\n     * @return balance_ The total balance of this contract in USD.\n     */\n    function getTotalBalanceUsd() external view returns (uint256 balance_);\n\n    /**\n     * @notice Get balance for the sender for a given token.\n     * @param _token The token address to check the balance for (use address(0) for ETH).\n     * @return funds_ The balance of the sender.\n     */\n    function getMyFunds(address _token) external view returns (uint256 funds_);\n\n    /**\n     * @notice Get funds stored in vault for a given address for a given token.\n     * @param _address The address to check the funds for.\n     * @param _token The token address to check the balance for (use address(0) for ETH).\n     * @return funds_ The funds stored in vault for the given address.\n     * @dev Sensitive information, should only be accessible to owner.\n     */\n    function getFundsForAddress(address _address, address _token) external view returns (uint256 funds_);\n\n    /**\n     * @notice Get this contract's deposit count.\n     * @return depositCount_ The deposit count.\n     * @dev Sensitive information, should only be accessible to owner.\n     */\n    function getDepositCount() external view returns (uint256 depositCount_);\n\n    /**\n     * @notice Get this contract's withdraw count.\n     * @return withdrawCount_ The withdraw count.\n     * @dev Sensitive information, should only be accessible to owner.\n     */\n    function getWithdrawCount() external view returns (uint256 withdrawCount_);\n}\n\n/**\n * @title Kipu Bank\n * @author Christian López (@moonstar-x)\n * @notice A smart contract for secure ETH deposits and withdrawals with bank cap and single withdrawal limit.\n * @dev Do not use in production. This is an educational example.\n */\ncontract KipuBank is IKipuBank, ReentrancyGuard, Ownable {\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice The address used to represent ETH in this contract.\n     */\n    address internal constant ETH_ADDRESS = address(0);\n\n    /**\n     * @notice The maximum age of a Chainlink oracle response before it is considered stale.\n     */\n    uint256 internal constant ORACLE_STALE_TIME_SECONDS = 3600;\n\n    /**\n     * @notice The maximum value that this contract can hold.\n     */\n    uint256 private immutable i_bankCap;\n\n    /**\n     * @notice The maximum amount that a user can withdraw from their vault in a single transaction.\n     */\n    uint256 private immutable i_maxSingleWithdrawLimit;\n\n    /**\n     * @notice The USD Coin (USDC) token contract address on the Ethereum network.\n     */\n    IERC20 private immutable i_USDCToken;\n\n    /**\n     * @notice The Chainlink price feed for ETH/USD.\n     */\n    AggregatorV3Interface private s_priceFeed;\n\n    /**\n     * @notice Counter for each successful deposit.\n     */\n    uint256 private s_depositCount = 0;\n\n    /**\n     * @notice Counter for each successful withdrawal.\n     */\n    uint256 private s_withdrawCount = 0;\n\n    /**\n     * @notice Vault that keeps funds per address per token.\n     */\n    mapping(address _userAddress => mapping(address _token => uint256 _amount)) private s_vault;\n\n    /**\n     * @notice Event emitted when a deposit is successful.\n     * @param _address The address of the message sender.\n     * @param _token The token address being deposited.\n     * @param _amount The amount deposited.\n     */\n    event DepositSuccess(address indexed _address, address indexed _token, uint256 _amount);\n\n    /**\n     * @notice Event emitted when a withdraw is successful.\n     * @param _address The address of the message sender.\n     * @param _token The token address being withdrawn.\n     * @param _amount The amount withdrawn.\n     */\n    event WithdrawSuccess(address indexed _address, address indexed _token, uint256 _amount);\n\n    /**\n     * @notice Error thrown when the constructor preconditions are not met.\n     * @param _reason The reason why the precondition failed.\n     */\n    error ConstructorPreconditionError(string _reason);\n\n    /**\n     * @notice Error thrown when the contract has or would reach the bank cap set in\n     * the deployment step by the current deposit.\n     * @param _sender The address of the sender.\n     * @param _token The token address being deposited.\n     * @param _potentialBankValue The potential new bank value if the deposit is accepted.\n     * @param _bankCap The maximum bank cap.\n     */\n    error BankCapReachedError(address _sender, address _token, uint256 _potentialBankValue, uint256 _bankCap);\n\n    /**\n     * @notice Error thrown when the current withdrawal request would exceed the withdraw\n     * limit set in the deployment step.\n     * @param _sender The address of the sender.\n     * @param _token The token address being withdrawn.\n     * @param _amount The amount that was attempted to be withdrawn.\n     * @param _limit The maximum single withdrawal limit.\n     */\n    error WithdrawLimitExceededError(address _sender, address _token, uint256 _amount, uint256 _limit);\n\n    /**\n     * @notice Error thrown when a withdrawal request attempts to withdraw an amount that\n     * exceeds the funds stored in the contract.\n     * @param _sender The address of the sender.\n     * @param _token The token address being withdrawn.\n     * @param _funds The funds in the sender's vault.\n     * @param _amount The amount that was attempted to be withdrawn.\n     */\n    error InsufficientFundsError(address _sender, address _token, uint256 _funds, uint256 _amount);\n\n    /**\n     * @notice Error thrown if a transfer was not successful.\n     * @param _sender The address of the sender.\n     * @param _token The token address being transferred.\n     * @param _amount The amount that was attempted to be transferred.\n     */\n    error TransferError(address _sender, address _token, uint256 _amount);\n\n    /**\n     * @notice Error thrown if the Chainlink oracle returns a stale response.\n     */\n    error OracleStaleResponse();\n\n    /**\n     * @notice Error thrown if the Chainlink oracle returns an incoherent response.\n     */\n    error OracleIncoherentResponse();\n\n    /**\n     * @notice Deploys the contract by setting the bank cap and the maximum single withdrawal limit.\n     * @param _bankCap The maximum value that this contract can hold.\n     * @param _maxWithdrawLimit The maximum amount that a user can withdraw from their vault in a single transaction.\n     * @param _owner The address of the owner of the contract.\n     * @param _priceFeed The address of the Chainlink price feed contract for ETH/USD.\n     * @param _usdcToken The address of the USD Coin (USDC) token contract on the Ethereum network.\n     */\n    constructor(\n        uint256 _bankCap,\n        uint256 _maxWithdrawLimit,\n        address _owner,\n        address _priceFeed,\n        IERC20 _usdcToken\n    ) Ownable(_owner) {\n        if (_bankCap < _maxWithdrawLimit) {\n            revert ConstructorPreconditionError(\"Exp. bankCap >= maxWithdrawLimit\");\n        }\n\n        i_bankCap = _bankCap;\n        i_maxSingleWithdrawLimit = _maxWithdrawLimit;\n        s_priceFeed = AggregatorV3Interface(_priceFeed);\n        i_USDCToken = _usdcToken;\n    }\n\n    /**\n     * @notice Allows contract to receive ETH directly.\n     */\n    receive() external payable override {\n        depositEther();\n    }\n\n    /**\n     * @notice Get balance for the sender for a given token.\n     * @param _token The token address to check the balance for (use address(0) for ETH).\n     * @return funds_ The balance of the sender.\n     */\n    function getMyFunds(address _token) external view override returns (uint256 funds_) {\n        funds_ = s_vault[msg.sender][_token];\n    }\n\n    /**\n     * @notice Get funds stored in vault for a given address for a given token.\n     * @param _address The address to check the funds for.\n     * @param _token The token address to check the balance for (use address(0) for ETH).\n     * @return funds_ The funds stored in vault for the given address.\n     * @dev Sensitive information, should only be accessible to owner.\n     */\n    function getFundsForAddress(\n        address _address,\n        address _token\n    ) external view override onlyOwner returns (uint256 funds_) {\n        funds_ = s_vault[_address][_token];\n    }\n\n    /**\n     * @notice Get this contract's deposit count.\n     * @return depositCount_ The deposit count.\n     * @dev Sensitive information, should only be accessible to owner.\n     */\n    function getDepositCount() external view override onlyOwner returns (uint256 depositCount_) {\n        depositCount_ = s_depositCount;\n    }\n\n    /**\n     * @notice Get this contract's withdraw count.\n     * @return withdrawCount_ The withdraw count.\n     * @dev Sensitive information, should only be accessible to owner.\n     */\n    function getWithdrawCount() external view override onlyOwner returns (uint256 withdrawCount_) {\n        withdrawCount_ = s_withdrawCount;\n    }\n\n    /**\n     * @notice Deposits the value in the address' ETH vault.\n     * @dev Reverts with BankCapReachedError if the deposit would exceed the bank cap.\n     * @dev Emits a DepositSuccess event upon success.\n     */\n    function depositEther() public payable override {\n        uint256 potentialBankValue = getBalanceEther() + msg.value;\n        if (potentialBankValue > i_bankCap) {\n            revert BankCapReachedError(msg.sender, ETH_ADDRESS, potentialBankValue, i_bankCap);\n        }\n\n        _updateDepositValues(msg.sender, ETH_ADDRESS, msg.value);\n        emit DepositSuccess(msg.sender, ETH_ADDRESS, msg.value);\n    }\n\n    /**\n     * @notice Deposits the value in the address' USDC vault.\n     * Bank cap is dynamically converted from ETH to USDC, assume that this value might fluctuate.\n     * @dev Reverts with BankCapReachedError if the deposit would exceed the bank cap.\n     * @dev Emits a DepositSuccess event upon success.\n     * @param _amount The amount in USDC to deposit.\n     */\n    function depositUsdc(uint256 _amount) public override {\n        uint256 potentialBankValue = getBalanceUsdc() + _amount;\n        uint256 usdcBankCap = _convertEthWeiToUsd(i_bankCap, _getLatestPriceEthToUsd());\n        if (potentialBankValue > usdcBankCap) {\n            revert BankCapReachedError(msg.sender, address(i_USDCToken), potentialBankValue, usdcBankCap);\n        }\n\n        _updateDepositValues(msg.sender, address(i_USDCToken), _amount);\n        i_USDCToken.safeTransferFrom(msg.sender, address(this), _amount);\n\n        emit DepositSuccess(msg.sender, address(i_USDCToken), _amount);\n    }\n\n    /**\n     * @notice Withdraws amount from the address' ETH vault.\n     * @dev Reverts with WithdrawLimitExceededError if the amount exceeds the single withdraw limit.\n     * @dev Reverts with InsufficientFundsError if the withdraw would exceed the available balance.\n     * @dev Reverts with TransferError if the transfer was not successful.\n     * @dev Emits a WithdrawSuccess event upon success.\n     * @param _amount The amount to withdraw.\n     */\n    function withdrawEther(uint256 _amount) public override nonReentrant {\n        if (_amount > i_maxSingleWithdrawLimit) {\n            revert WithdrawLimitExceededError(msg.sender, ETH_ADDRESS, _amount, i_maxSingleWithdrawLimit);\n        }\n\n        uint256 funds = s_vault[msg.sender][ETH_ADDRESS];\n        if (_amount > funds) {\n            revert InsufficientFundsError(msg.sender, ETH_ADDRESS, funds, _amount);\n        }\n\n        _updateWithdrawValues(msg.sender, ETH_ADDRESS, _amount);\n\n        address payable payableSender = payable(msg.sender);\n        (bool success, ) = payableSender.call{ value: _amount }(\"\");\n        if (!success) {\n            revert TransferError(msg.sender, ETH_ADDRESS, _amount);\n        }\n\n        emit WithdrawSuccess(msg.sender, ETH_ADDRESS, _amount);\n    }\n\n    /**\n     * @notice Withdraws the value in the address' USDC vault.\n     * @dev Reverts with WithdrawLimitExceededError if the amount exceeds the single withdraw limit.\n     * @dev Reverts with InsufficientFundsError if the withdraw would exceed the available balance.\n     * @dev Reverts with TransferError if the transfer was not successful.\n     * @dev Emits a WithdrawSuccess event upon success.\n     * @param _amount The amount in USDC to withdraw.\n     */\n    function withdrawUsdc(uint256 _amount) public override nonReentrant {\n        uint256 usdcMaxSingleWithdrawLimit = _convertEthWeiToUsd(i_maxSingleWithdrawLimit, _getLatestPriceEthToUsd());\n        if (_amount > usdcMaxSingleWithdrawLimit) {\n            revert WithdrawLimitExceededError(msg.sender, address(i_USDCToken), _amount, usdcMaxSingleWithdrawLimit);\n        }\n\n        uint256 funds = s_vault[msg.sender][address(i_USDCToken)];\n        if (_amount > funds) {\n            revert InsufficientFundsError(msg.sender, address(i_USDCToken), funds, _amount);\n        }\n\n        _updateWithdrawValues(msg.sender, address(i_USDCToken), _amount);\n\n        i_USDCToken.safeTransfer(msg.sender, _amount);\n\n        emit WithdrawSuccess(msg.sender, address(i_USDCToken), _amount);\n    }\n\n    /**\n     * @notice Get balance in this contract in ETH.\n     * @return balance_ The balance of this contract in ETH.\n     */\n    function getBalanceEther() public view override returns (uint256 balance_) {\n        balance_ = address(this).balance;\n    }\n\n    /**\n     * @notice Get balance in this contract in USDC.\n     * @return balance_ The balance of this contract in USDC.\n     */\n    function getBalanceUsdc() public view override returns (uint256 balance_) {\n        balance_ = i_USDCToken.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Get the total balance in this contract in USD.\n     * @return balance_ The total balance of this contract in USD.\n     */\n    function getTotalBalanceUsd() public view override returns (uint256 balance_) {\n        balance_ = _convertEthWeiToUsd(getBalanceEther(), _getLatestPriceEthToUsd()) + getBalanceUsdc();\n    }\n\n    /**\n     * @notice Get the latest price from the Chainlink price feed.\n     * @dev Reverts with OracleIncoherentResponse if the response is incoherent.\n     * @dev Reverts with OracleStaleResponse if the response is stale.\n     * @return price_ The latest price.\n     */\n    function _getLatestPriceEthToUsd() internal view returns (uint256 price_) {\n        (, int256 price, , uint256 updatedAt, ) = s_priceFeed.latestRoundData();\n\n        if (price < 0) {\n            revert OracleIncoherentResponse();\n        }\n\n        if (updatedAt + ORACLE_STALE_TIME_SECONDS < block.timestamp) {\n            revert OracleStaleResponse();\n        }\n\n        price_ = uint256(price);\n    }\n\n    /**\n     * @notice Converts an amount in ETH to USD.\n     * @param _amountEthWei The amount in ETH (Wei).\n     * @param _ethPrice The current price of ETH in USD.\n     * @return amountUsd_ The equivalent amount in USD.\n     */\n    function _convertEthWeiToUsd(uint256 _amountEthWei, uint256 _ethPrice) internal pure returns (uint256 amountUsd_) {\n        amountUsd_ = (_amountEthWei * _ethPrice) / 1e20;\n    }\n\n    /**\n     * @notice Update the relevant variables when a deposit is successful.\n     * @param _address The address of the user making the deposit.\n     * @param _token The token address being deposited.\n     * @param _amount The amount deposited.\n     */\n    function _updateDepositValues(address _address, address _token, uint256 _amount) private {\n        s_vault[_address][_token] += _amount;\n        ++s_depositCount;\n    }\n\n    /**\n     * @notice Update the relevant variables when a withdrawal is successful.\n     * @param _address The address of the user making the withdrawal.\n     * @param _token The token address being withdrawn.\n     * @param _amount The amount withdrawn.\n     */\n    function _updateWithdrawValues(address _address, address _token, uint256 _amount) private {\n        s_vault[_address][_token] -= _amount;\n        ++s_withdrawCount;\n    }\n}\n"
      }
    }
  }
}